// Generated by rstantools.  Do not edit by hand.

/*
    bcgp is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bcgp is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bcgp.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_stanNonCompS_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_stanNonCompS");
    reader.add_event(2, 2, "include", "/functions/common_functions.stan");
    reader.add_event(2, 0, "start", "/functions/common_functions.stan");
    reader.add_event(119, 117, "end", "/functions/common_functions.stan");
    reader.add_event(119, 3, "restart", "model_stanNonCompS");
    reader.add_event(168, 50, "end", "model_stanNonCompS");
    return reader;
}
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
get_cor_mat(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& rho, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 20;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,rows(x));
        current_statement_begin__ = 21;
        int d(0);
        (void) d;  // dummy to suppress unused var warning
        stan::math::fill(d, std::numeric_limits<int>::min());
        stan::math::assign(d,cols(x));
        current_statement_begin__ = 22;
        local_scalar_t__ tmp(DUMMY_VAR__);
        (void) tmp;  // dummy to suppress unused var warning
        stan::math::initialize(tmp, DUMMY_VAR__);
        stan::math::fill(tmp, DUMMY_VAR__);
        current_statement_begin__ = 23;
        validate_non_negative_index("dist4", "d", d);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dist4(d);
        stan::math::initialize(dist4, DUMMY_VAR__);
        stan::math::fill(dist4, DUMMY_VAR__);
        current_statement_begin__ = 24;
        validate_non_negative_index("R", "n", n);
        validate_non_negative_index("R", "n", n);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> R(n, n);
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        current_statement_begin__ = 26;
        for (int i = 1; i <= (n - 1); ++i) {
            current_statement_begin__ = 27;
            stan::model::assign(R, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                        1.0, 
                        "assigning variable R");
            current_statement_begin__ = 28;
            for (int j = (i + 1); j <= n; ++j) {
                current_statement_begin__ = 29;
                stan::math::assign(dist4, multiply(4.0, transpose(subtract(get_base1(x, i, "x", 1), get_base1(x, j, "x", 1)))));
                current_statement_begin__ = 30;
                stan::math::assign(tmp, 1.0);
                current_statement_begin__ = 31;
                for (int k = 1; k <= d; ++k) {
                    current_statement_begin__ = 32;
                    stan::math::assign(tmp, (tmp * pow(get_base1(rho, k, "rho", 1), pow(get_base1(dist4, k, "dist4", 1), 2))));
                }
                current_statement_begin__ = 34;
                stan::model::assign(R, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            tmp, 
                            "assigning variable R");
                current_statement_begin__ = 35;
                stan::model::assign(R, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            tmp, 
                            "assigning variable R");
            }
        }
        current_statement_begin__ = 38;
        stan::model::assign(R, 
                    stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                    1, 
                    "assigning variable R");
        current_statement_begin__ = 40;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_cor_mat_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& x,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& rho, std::ostream* pstream__) const {
        return get_cor_mat(x, rho, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
get_cov_mat_ns(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& V,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& R,
                   const T2__& sigma2eps, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 63;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(R));
        current_statement_begin__ = 64;
        validate_non_negative_index("rootV", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rootV(N);
        stan::math::initialize(rootV, DUMMY_VAR__);
        stan::math::fill(rootV, DUMMY_VAR__);
        stan::math::assign(rootV,stan::math::sqrt(V));
        current_statement_begin__ = 65;
        validate_non_negative_index("C", "N", N);
        validate_non_negative_index("C", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> C(N, N);
        stan::math::initialize(C, DUMMY_VAR__);
        stan::math::fill(C, DUMMY_VAR__);
        stan::math::assign(C,add(quad_form_diag(R, rootV), diag_matrix(rep_vector(sigma2eps, N))));
        current_statement_begin__ = 68;
        return stan::math::promote_scalar<fun_return_scalar_t__>(C);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_cov_mat_ns_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& V,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& R,
                   const T2__& sigma2eps, std::ostream* pstream__) const {
        return get_cov_mat_ns(V, R, sigma2eps, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
get_cov_mat_s(const T0__& sigma2,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& R,
                  const T2__& sigma2eps, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 90;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(R));
        current_statement_begin__ = 91;
        validate_non_negative_index("C", "N", N);
        validate_non_negative_index("C", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> C(N, N);
        stan::math::initialize(C, DUMMY_VAR__);
        stan::math::fill(C, DUMMY_VAR__);
        stan::math::assign(C,add(multiply(sigma2, R), diag_matrix(rep_vector(sigma2eps, N))));
        current_statement_begin__ = 93;
        return stan::math::promote_scalar<fun_return_scalar_t__>(C);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_cov_mat_s_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& sigma2,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& R,
                  const T2__& sigma2eps, std::ostream* pstream__) const {
        return get_cov_mat_s(sigma2, R, sigma2eps, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
combine_cor_mats(const T0__& w,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& G,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& L, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 115;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(G));
        current_statement_begin__ = 116;
        validate_non_negative_index("R", "N", N);
        validate_non_negative_index("R", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> R(N, N);
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        stan::math::assign(R,add(multiply(w, G), multiply((1 - w), L)));
        current_statement_begin__ = 117;
        return stan::math::promote_scalar<fun_return_scalar_t__>(R);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct combine_cor_mats_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& w,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& G,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& L, std::ostream* pstream__) const {
        return combine_cor_mats(w, G, L, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_stanNonCompS : public prob_grad {
private:
        int n;
        int d;
        vector_d y;
        matrix_d x;
        vector_d rho_alpha;
        vector_d rho_beta;
        double sigma2_alpha;
        double sigma2_beta;
        double sigma2eps_alpha;
        double sigma2eps_beta;
public:
    model_stanNonCompS(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_stanNonCompS(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_stanNonCompS_namespace::model_stanNonCompS";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 124;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 125;
            context__.validate_dims("data initialization", "d", "int", context__.to_vec());
            d = int(0);
            vals_i__ = context__.vals_i("d");
            pos__ = 0;
            d = vals_i__[pos__++];
            check_greater_or_equal(function__, "d", d, 1);
            current_statement_begin__ = 126;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 127;
            validate_non_negative_index("x", "n", n);
            validate_non_negative_index("x", "d", d);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(n,d));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, d);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = d;
            size_t x_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 129;
            validate_non_negative_index("rho_alpha", "d", d);
            context__.validate_dims("data initialization", "rho_alpha", "vector_d", context__.to_vec(d));
            rho_alpha = Eigen::Matrix<double, Eigen::Dynamic, 1>(d);
            vals_r__ = context__.vals_r("rho_alpha");
            pos__ = 0;
            size_t rho_alpha_j_1_max__ = d;
            for (size_t j_1__ = 0; j_1__ < rho_alpha_j_1_max__; ++j_1__) {
                rho_alpha(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "rho_alpha", rho_alpha, 0);
            current_statement_begin__ = 130;
            validate_non_negative_index("rho_beta", "d", d);
            context__.validate_dims("data initialization", "rho_beta", "vector_d", context__.to_vec(d));
            rho_beta = Eigen::Matrix<double, Eigen::Dynamic, 1>(d);
            vals_r__ = context__.vals_r("rho_beta");
            pos__ = 0;
            size_t rho_beta_j_1_max__ = d;
            for (size_t j_1__ = 0; j_1__ < rho_beta_j_1_max__; ++j_1__) {
                rho_beta(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "rho_beta", rho_beta, 0);
            current_statement_begin__ = 131;
            context__.validate_dims("data initialization", "sigma2_alpha", "double", context__.to_vec());
            sigma2_alpha = double(0);
            vals_r__ = context__.vals_r("sigma2_alpha");
            pos__ = 0;
            sigma2_alpha = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma2_alpha", sigma2_alpha, 0);
            current_statement_begin__ = 132;
            context__.validate_dims("data initialization", "sigma2_beta", "double", context__.to_vec());
            sigma2_beta = double(0);
            vals_r__ = context__.vals_r("sigma2_beta");
            pos__ = 0;
            sigma2_beta = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma2_beta", sigma2_beta, 0);
            current_statement_begin__ = 133;
            context__.validate_dims("data initialization", "sigma2eps_alpha", "double", context__.to_vec());
            sigma2eps_alpha = double(0);
            vals_r__ = context__.vals_r("sigma2eps_alpha");
            pos__ = 0;
            sigma2eps_alpha = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma2eps_alpha", sigma2eps_alpha, 0);
            current_statement_begin__ = 134;
            context__.validate_dims("data initialization", "sigma2eps_beta", "double", context__.to_vec());
            sigma2eps_beta = double(0);
            vals_r__ = context__.vals_r("sigma2eps_beta");
            pos__ = 0;
            sigma2eps_beta = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma2eps_beta", sigma2eps_beta, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 139;
            num_params_r__ += 1;
            current_statement_begin__ = 140;
            validate_non_negative_index("rho", "d", d);
            num_params_r__ += d;
            current_statement_begin__ = 141;
            num_params_r__ += 1;
            current_statement_begin__ = 142;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_stanNonCompS() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 139;
        if (!(context__.contains_r("beta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta0", "double", context__.to_vec());
        double beta0(0);
        beta0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 140;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "d", d);
        context__.validate_dims("parameter initialization", "rho", "vector_d", context__.to_vec(d));
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho(d);
        size_t rho_j_1_max__ = d;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            rho(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 141;
        if (!(context__.contains_r("sigma2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma2", "double", context__.to_vec());
        double sigma2(0);
        sigma2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 142;
        if (!(context__.contains_r("sigma2eps")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma2eps missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma2eps");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma2eps", "double", context__.to_vec());
        double sigma2eps(0);
        sigma2eps = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma2eps);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma2eps: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 139;
            local_scalar_t__ beta0;
            (void) beta0;  // dummy to suppress unused var warning
            if (jacobian__)
                beta0 = in__.scalar_constrain(lp__);
            else
                beta0 = in__.scalar_constrain();
            current_statement_begin__ = 140;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.vector_lub_constrain(0, 1, d, lp__);
            else
                rho = in__.vector_lub_constrain(0, 1, d);
            current_statement_begin__ = 141;
            local_scalar_t__ sigma2;
            (void) sigma2;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma2 = in__.scalar_lb_constrain(0, lp__);
            else
                sigma2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 142;
            local_scalar_t__ sigma2eps;
            (void) sigma2eps;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma2eps = in__.scalar_lb_constrain(0, lp__);
            else
                sigma2eps = in__.scalar_lb_constrain(0);
            // model body
            {
            current_statement_begin__ = 147;
            validate_non_negative_index("C_L", "n", n);
            validate_non_negative_index("C_L", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> C_L(n, n);
            stan::math::initialize(C_L, DUMMY_VAR__);
            stan::math::fill(C_L, DUMMY_VAR__);
            current_statement_begin__ = 148;
            validate_non_negative_index("beta0_vec", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta0_vec(n);
            stan::math::initialize(beta0_vec, DUMMY_VAR__);
            stan::math::fill(beta0_vec, DUMMY_VAR__);
            {
            current_statement_begin__ = 151;
            validate_non_negative_index("R", "n", n);
            validate_non_negative_index("R", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> R(n, n);
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            stan::math::assign(R,get_cor_mat(x, rho, pstream__));
            current_statement_begin__ = 152;
            validate_non_negative_index("C", "n", n);
            validate_non_negative_index("C", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> C(n, n);
            stan::math::initialize(C, DUMMY_VAR__);
            stan::math::fill(C, DUMMY_VAR__);
            stan::math::assign(C,get_cov_mat_s(sigma2, R, sigma2eps, pstream__));
            current_statement_begin__ = 153;
            stan::math::assign(C_L, cholesky_decompose(C));
            current_statement_begin__ = 154;
            stan::math::assign(beta0_vec, rep_vector(beta0, n));
            }
            current_statement_begin__ = 159;
            for (int i = 1; i <= d; ++i) {
                current_statement_begin__ = 160;
                lp_accum__.add(beta_log<propto__>(get_base1(rho, i, "rho", 1), get_base1(rho_alpha, i, "rho_alpha", 1), get_base1(rho_beta, i, "rho_beta", 1)));
            }
            current_statement_begin__ = 161;
            lp_accum__.add(gamma_log<propto__>(sigma2, sigma2_alpha, (1 / sigma2_beta)));
            current_statement_begin__ = 162;
            lp_accum__.add(gamma_log<propto__>(sigma2eps, sigma2eps_alpha, (1 / sigma2eps_beta)));
            current_statement_begin__ = 164;
            lp_accum__.add(multi_normal_cholesky_log<propto__>(y, beta0_vec, C_L));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta0");
        names__.push_back("rho");
        names__.push_back("sigma2");
        names__.push_back("sigma2eps");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_stanNonCompS_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double beta0 = in__.scalar_constrain();
        vars__.push_back(beta0);
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho = in__.vector_lub_constrain(0, 1, d);
        size_t rho_j_1_max__ = d;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            vars__.push_back(rho(j_1__));
        }
        double sigma2 = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma2);
        double sigma2eps = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma2eps);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_stanNonCompS";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta0";
        param_names__.push_back(param_name_stream__.str());
        size_t rho_j_1_max__ = d;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2eps";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta0";
        param_names__.push_back(param_name_stream__.str());
        size_t rho_j_1_max__ = d;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2eps";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_stanNonCompS_namespace::model_stanNonCompS stan_model;
#endif
